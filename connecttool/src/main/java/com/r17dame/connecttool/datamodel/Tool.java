package com.r17dame.connecttool.datamodel;

import static java.nio.charset.StandardCharsets.UTF_8;

import android.app.Activity;
import android.content.Context;
import android.content.SharedPreferences;
import android.os.Build;

import androidx.annotation.RequiresApi;

import com.r17dame.connecttool.R;

import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.text.SimpleDateFormat;
import java.util.Base64;
import java.util.Date;

public class Tool {

    //    Currency Code
//    Code	USD	TWD	CNY	JPY	KRW	VND	THB	MYR	SGD
//    key	1	2	4	8	16	32	64	128	256
    public static String getCurrencyCode(String _code) {

        int code = Integer.parseInt(_code);
        switch (code) {
            case 1:
                return "USD";
            case 2:
                return "TWD";
            case 4:
                return "CNY";
            case 8:
                return "JPY";
            case 16:
                return "KRW";
            case 32:
                return "VND";
            case 64:
                return "THB";
            case 128:
                return "MYR";
            case 256:
                return "SGD";
            default:
                return "_";
        }
    }

    ;

    public static String getTimestamp() {
        Date currentDate = new Date();
        System.out.println("Current Timestamp: " + currentDate.getTime() + " milliseconds");

        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
        String dateString = formatter.format(currentDate);
        return dateString + "Z";
    }


    public static String getxSignature(String data, String RSAstr) throws Exception {
        PrivateKey privateKey = Tool.stringtoprivatekey(RSAstr);

        //Let's sign our message
        String signature = Tool.sign(data, privateKey);

        return signature.replace("\n", "").replace("\r", "");
    }


    public static PrivateKey stringtoprivatekey(String privateKeyString) {
        try {
            if (privateKeyString.contains("-----BEGIN PRIVATE KEY-----") || privateKeyString.contains("-----END PRIVATE KEY-----"))
                privateKeyString = privateKeyString.replace("-----BEGIN PRIVATE KEY-----", "").replace("-----END PRIVATE KEY-----", "");
            if (privateKeyString.contains("-----BEGIN RSA PRIVATE KEY-----") || privateKeyString.contains("-----END RSA PRIVATE KEY-----"))
                privateKeyString = privateKeyString.replace("-----BEGIN RSA PRIVATE KEY-----", "").replace("-----END RSA PRIVATE KEY-----", "");

            privateKeyString = privateKeyString.replaceAll("\\r|\\n", "");
            byte[] privateKeyDER = new byte[0];
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                privateKeyDER = Base64.getDecoder().decode(privateKeyString);

                PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(privateKeyDER);
                KeyFactory keyFactory = KeyFactory.getInstance("RSA");
                PrivateKey privateKey = keyFactory.generatePrivate(pkcs8KeySpec);

//                privateKey = {BCRSAPrivateCrtKey@23996} "RSA Private CRT Key [7e:88:5c:bf:de:0c:f2:a3:24:99:6e:ec:7e:43:47:94:35:dd:d8:a2],[85:f9:0d:fe]\n
//                modulus: b9db769851af1049a9a85b1885dabe52b034e14a2e991701ecb631ed53b84166330d8c0d056b8c3375df1aa0d27776c2f51f2eccfcb6a1e10d6b9e45e91f474e4e1a6bb4d221562c329d48a67fd2321b37b2706813d5339944deccd298bc4650f322dd22d0057e7aa5de9868ee2339da1f9dbdd84d68f36ae16e421aa31d90ecdb1dc14464c9266f41c2649df7230b62e6076a86b255200f842c64bb1ff0886cecb85fa913ffda30ba4a9234a49c0598a420745f38d33204de088416c4317462b224f3fe75e82dd5cfee9eff43a80ff6522c9083d619ac9d9dc4004532858ac324531a8cfe05dca10857291efc30c228bb2bd936e3338782bdb31150a5a99fd9\n     public exponent: 10001\n"
//                crtCoefficient = {BigInteger@24002} "87053649459332913138211058128218064094096173182291487321362748317157816043852440122570433604308488768680764898538896362131072789195747932095435841771843729108098905667098583196915210751544761952432802124289180981777793604740139254634517279378634083399517128918088775432391121607838587332479429618360839667260"
//                primeExponentP = {BigInteger@24003} "22612677501749111356530690889489414067458702422184489367756920682301923618466900373176019637149097335768273228241624025053556644037411903805312220386336558622769515346496249654175993236173190974882477836344858198201536389497269254874522616543193289897344527059806338077869715084545845920227239876768976320223"
//                primeExponentQ = {BigInteger@24004} "114801142988423928583216286893345386898554433982217595722089573515274795554047510454329897158818780286735423526135350082235874411547412228863839343199120730086802463968211467538721535933268065739052400677609768136641474627462329279851078897080694785508298818132301566624238131717442397345108536219376866146177"
//                primeP = {BigInteger@24005} "151082377962292946373019868368280938907028339345774786389508136482416267528133882124256988373926026311983415491820910768675190313006408802088770209752200942242883650449926059087137533766855175544996732588493523471866050602353199628576979174267637744928358473842239573718967021867252635750222511958793801722751"
//                primeQ = {BigInteger@24006} "155294800776757327599864716688597601989154597504388097978009089734778820100429567632212237246068081317118961600733413935342893438523422127704950442438093941704482601574568092554598606763098357503721044897797873480248355404970250041562090440843326745332260973496050358566972722060064861187383960910859099996327"
//                publicExponent = {BigInteger@24007} "65537"
//                algorithmIdentifier = {AlgorithmIdentifier@24008}
//                algorithmIdentifierEnc = {byte[15]@24009} [48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 1, 5, 0]
//                attrCarrier = {PKCS12BagAttributeCarrierImpl@24010}
//                modulus = {BigInteger@24011} "23462307786533034801832209522930252775525751739584935814228979676630408778713003706487977277101274186861124376665332085679260854001586423859511231453295784113213084075044011883831026343930438728535334147757157567813551159036767362494691923538931557920836787206897511937284020816731272566861278543835800396164020897457232083956738778177765766812511222387915445718832556105562083143565493952379261520973511420780025298542863316235554730094301551142725594451426502074606930859519970720952402015231978329623787467281129237840824887659068500580843196680587280468916913162071514940765799103821854290496510298775750372335577"
//                privateExponent = {BigInteger@24012} "1503842626942995583017682146003870818403728801655295792864659667490101832701839025838643258241045807726037146419765501135389399790082915571751125515736319287296800715695991769331515500079911036803649241039594425894717852542234881579149221663272225322684820240888467305662720958300641860768654003130133901930487767136882316912432243318305269847561391413310164203833602494049184833406661876466995379231299495858969898205679203662462552030209953757029705731713763131344084680835039726802940890148541620186251167181869511222055375791666240096315533766061576076430243543815290607121998197727446341620912899146378586776473"
//                rsaPrivateKey = {RSAPrivateCrtKeyParameters@24013}
//                shadow$_klass_ = {Class@23955} "class com.android.org.bouncycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey"
//                shadow$_monitor_ = 0

                return privateKey;
            } else {
                privateKeyDER = android.util.Base64.decode(privateKeyString, android.util.Base64.DEFAULT);

                //privateKeyDER = Base64Utils.decode(privateKeyString);

                PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(privateKeyDER);
                KeyFactory keyFactory = KeyFactory.getInstance("RSA", "BC");
                PrivateKey privateKey = keyFactory.generatePrivate(pkcs8KeySpec);

//                privateKey = {BCRSAPrivateCrtKey@4816} "RSA Private CRT Key\n
//                modulus: b9db769851af1049a9a85b1885dabe52b034e14a2e991701ecb631ed53b84166330d8c0d056b8c3375df1aa0d27776c2f51f2eccfcb6a1e10d6b9e45e91f474e4e1a6bb4d221562c329d48a67fd2321b37b2706813d5339944deccd298bc4650f322dd22d0057e7aa5de9868ee2339da1f9dbdd84d68f36ae16e421aa31d90ecdb1dc14464c9266f41c2649df7230b62e6076a86b255200f842c64bb1ff0886cecb85fa913ffda30ba4a9234a49c0598a420745f38d33204de088416c4317462b224f3fe75e82dd5cfee9eff43a80ff6522c9083d619ac9d9dc4004532858ac324531a8cfe05dca10857291efc30c228bb2bd936e3338782bdb31150a5a99fd9\n    public exponent: 10001\n   private exponent: be9a88faed1fd1b4647f23ed4d03bd96a4deebad08323846365c78c220cf209839adf5a88f9bc6ccd50aae645573eecd41aac3c9b5e216b74196d205206f28d19add1302fdfcf242f6d016bc54ef5c33a2e07cd1953006701e668a929a7b7b76c937ed517bc4d15136dfc70380358abf07c2ddfa011400e4910c6254045f434a907ace50e8abc72316513b34272294d2730f1915d88a1358a5bf2b5588b65e5734be682ad7c375d36bbe4d53a0140187549999529589f1b8b095b83803059e930bde1959775dbf"
//                crtCoefficient = {BigInteger@4820} "87053649459332913138211058128218064094096173182291487321362748317157816043852440122570433604308488768680764898538896362131072789195747932095435841771843729108098905667098583196915210751544761952432802124289180981777793604740139254634517279378634083399517128918088775432391121607838587332479429618360839667260"
//                primeExponentP = {BigInteger@4821} "22612677501749111356530690889489414067458702422184489367756920682301923618466900373176019637149097335768273228241624025053556644037411903805312220386336558622769515346496249654175993236173190974882477836344858198201536389497269254874522616543193289897344527059806338077869715084545845920227239876768976320223"
//                primeExponentQ = {BigInteger@4822} "114801142988423928583216286893345386898554433982217595722089573515274795554047510454329897158818780286735423526135350082235874411547412228863839343199120730086802463968211467538721535933268065739052400677609768136641474627462329279851078897080694785508298818132301566624238131717442397345108536219376866146177"
//                primeP = {BigInteger@4823} "151082377962292946373019868368280938907028339345774786389508136482416267528133882124256988373926026311983415491820910768675190313006408802088770209752200942242883650449926059087137533766855175544996732588493523471866050602353199628576979174267637744928358473842239573718967021867252635750222511958793801722751"
//                primeQ = {BigInteger@4824} "155294800776757327599864716688597601989154597504388097978009089734778820100429567632212237246068081317118961600733413935342893438523422127704950442438093941704482601574568092554598606763098357503721044897797873480248355404970250041562090440843326745332260973496050358566972722060064861187383960910859099996327"
//                publicExponent = {BigInteger@4825} "65537"
//                attrCarrier = {PKCS12BagAttributeCarrierImpl@4826}
//                modulus = {BigInteger@4827} "23462307786533034801832209522930252775525751739584935814228979676630408778713003706487977277101274186861124376665332085679260854001586423859511231453295784113213084075044011883831026343930438728535334147757157567813551159036767362494691923538931557920836787206897511937284020816731272566861278543835800396164020897457232083956738778177765766812511222387915445718832556105562083143565493952379261520973511420780025298542863316235554730094301551142725594451426502074606930859519970720952402015231978329623787467281129237840824887659068500580843196680587280468916913162071514940765799103821854290496510298775750372335577"
//                privateExponent = {BigInteger@4828} "1503842626942995583017682146003870818403728801655295792864659667490101832701839025838643258241045807726037146419765501135389399790082915571751125515736319287296800715695991769331515500079911036803649241039594425894717852542234881579149221663272225322684820240888467305662720958300641860768654003130133901930487767136882316912432243318305269847561391413310164203833602494049184833406661876466995379231299495858969898205679203662462552030209953757029705731713763131344084680835039726802940890148541620186251167181869511222055375791666240096315533766061576076430243543815290607121998197727446341620912899146378586776473"
//                shadow$_klass_ = {Class@4808} "class com.android.org.bouncycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey"
//                shadow$_monitor_ = -1605839760
                return privateKey;
            }
//            KeyFactory keyFactory = KeyFactory.getInstance("RSA");
//            PrivateKey privateKey = keyFactory.generatePrivate(new PKCS8EncodedKeySpec(privateKeyDER));


        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
            e.printStackTrace();
            return null;
        } catch (NoSuchProviderException e) {
            throw new RuntimeException(e);
        }
    }

    public static String sign(String plainText, PrivateKey privateKey) {
        try {
            Signature privateSignature = null;
            privateSignature = Signature.getInstance("SHA256withRSA");

            privateSignature.initSign(privateKey);
            privateSignature.update(plainText.getBytes(UTF_8));

            byte[] signature = privateSignature.sign();

            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                return Base64.getEncoder().encodeToString(signature);
            } else {
                return android.util.Base64.encodeToString(signature, android.util.Base64.DEFAULT);
            }
            //return android.util.Base64.encodeToString(signature, Base64.CRLF);

        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        } catch (SignatureException e) {
            throw new RuntimeException(e);
        } catch (InvalidKeyException e) {
            throw new RuntimeException(e);
        }
    }


    public static void RemoveAccessToken(SharedPreferences.Editor editor) {
        editor.putString(String.valueOf(R.string.expiresTs), "");
        editor.putString(String.valueOf(R.string.access_token), "");
        editor.putString(String.valueOf(R.string.refresh_token), "");
        editor.apply();
    }


}
